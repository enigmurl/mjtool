const path = require("path")
const url = require("url")

const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const fs = require('fs')
const {download} = require('electron-dl')

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 800,
    width: 1400,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false
    },
  });

  const startUrl = url.format(
    {
       pathname: path.join(__dirname, 'index.html'),
       protocol: 'file:',
       slashes: true
    });
  var env = app.isPackaged;
  console.log("Environment package", env); 
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  ipcMain.handle("showFolderPicker", async (e : any) => {
    return dialog.showOpenDialogSync(mainWindow, {
      properties: ['openDirectory']
    })
  });
 
  const folder =  path.join(app.getPath('appData'), 'mjtool')
  const fileLoc = path.join(app.getPath('appData'), 'mjtool', 'multi_config.json')
  ipcMain.handle("openApp", async (e: any) => {
    try {
      return JSON.parse(fs.readFileSync(fileLoc, {encoding: 'utf-8'}))
    } catch(err: any) {
      console.error(err);
    }
  })
  ipcMain.handle('saveApp', async (e: any, data: string) => {
    try {
      if (!fs.existsSync(folder)) {
        fs.mkdirSync(folder);
      }
      fs.writeFileSync(fileLoc, data)
    } catch(err: any) {
      console.error(err);
    }
  }) 
  
  ipcMain.handle("showMessage", async (e: any, title: string, type: string, data : string) => {
    dialog.showMessageBoxSync(mainWindow, {
      title: title,
      type: type,
      message: data,
    })
  })

  ipcMain.handle('download', async (e: any, info: {url : string, directory : string, fileName: string}) => {
    try {      
      await download(mainWindow, info.url, {directory: info.directory, filename: info.fileName})
    } catch(err: any) {
      console.error(err);
    }
  })
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});